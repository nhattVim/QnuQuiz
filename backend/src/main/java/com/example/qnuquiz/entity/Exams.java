package com.example.qnuquiz.entity;
// Generated Oct 12, 2025, 7:49:47â€¯PM by Hibernate Tools 7.1.3.Final

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.FetchType;
import jakarta.persistence.Id;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.ManyToOne;
import jakarta.persistence.OneToMany;
import jakarta.persistence.Table;
import jakarta.persistence.Temporal;
import jakarta.persistence.TemporalType;
import java.sql.Timestamp;
import java.util.HashSet;
import java.util.Set;

/**
 * Exams generated by hbm2java
 */
@Entity
@Table(name = "exams", schema = "public", catalog = "defaultdb")
public class Exams implements java.io.Serializable {

    private long id;
    private Users users;
    private String title;
    private String description;
    private Timestamp startTime;
    private Timestamp endTime;
    private boolean isRandom;
    private Integer durationMinutes;
    private String status;
    private Timestamp createdAt;
    private Timestamp updatedAt;
    private Set<ExamAttempts> examAttemptses = new HashSet<ExamAttempts>(0);
    private Set<ExamQuestions> examQuestionses = new HashSet<ExamQuestions>(0);
    private Set<Leaderboard> leaderboards = new HashSet<Leaderboard>(0);

    public Exams() {
    }

    public Exams(long id, String title, boolean isRandom, String status, Timestamp createdAt, Timestamp updatedAt) {
        this.id = id;
        this.title = title;
        this.isRandom = isRandom;
        this.status = status;
        this.createdAt = createdAt;
        this.updatedAt = updatedAt;
    }

    public Exams(long id, Users users, String title, String description, Timestamp startTime, Timestamp endTime,
            boolean isRandom, Integer durationMinutes, String status, Timestamp createdAt, Timestamp updatedAt,
            Set<ExamAttempts> examAttemptses, Set<ExamQuestions> examQuestionses, Set<Leaderboard> leaderboards) {
        this.id = id;
        this.users = users;
        this.title = title;
        this.description = description;
        this.startTime = startTime;
        this.endTime = endTime;
        this.isRandom = isRandom;
        this.durationMinutes = durationMinutes;
        this.status = status;
        this.createdAt = createdAt;
        this.updatedAt = updatedAt;
        this.examAttemptses = examAttemptses;
        this.examQuestionses = examQuestionses;
        this.leaderboards = leaderboards;
    }

    @Id

    @Column(name = "id", unique = true, nullable = false)
    public long getId() {
        return this.id;
    }

    public void setId(long id) {
        this.id = id;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "created_by")
    public Users getUsers() {
        return this.users;
    }

    public void setUsers(Users users) {
        this.users = users;
    }

    @Column(name = "title", nullable = false, length = 256)
    public String getTitle() {
        return this.title;
    }

    public void setTitle(String title) {
        this.title = title;
    }

    @Column(name = "description")
    public String getDescription() {
        return this.description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name = "start_time", length = 35)
    public Timestamp getStartTime() {
        return this.startTime;
    }

    public void setStartTime(Timestamp startTime) {
        this.startTime = startTime;
    }

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name = "end_time", length = 35)
    public Timestamp getEndTime() {
        return this.endTime;
    }

    public void setEndTime(Timestamp endTime) {
        this.endTime = endTime;
    }

    @Column(name = "is_random", nullable = false)
    public boolean isIsRandom() {
        return this.isRandom;
    }

    public void setIsRandom(boolean isRandom) {
        this.isRandom = isRandom;
    }

    @Column(name = "duration_minutes")
    public Integer getDurationMinutes() {
        return this.durationMinutes;
    }

    public void setDurationMinutes(Integer durationMinutes) {
        this.durationMinutes = durationMinutes;
    }

    @Column(name = "status", nullable = false)
    public String getStatus() {
        return this.status;
    }

    public void setStatus(String status) {
        this.status = status;
    }

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name = "created_at", nullable = false, length = 35)
    public Timestamp getCreatedAt() {
        return this.createdAt;
    }

    public void setCreatedAt(Timestamp createdAt) {
        this.createdAt = createdAt;
    }

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name = "updated_at", nullable = false, length = 35)
    public Timestamp getUpdatedAt() {
        return this.updatedAt;
    }

    public void setUpdatedAt(Timestamp updatedAt) {
        this.updatedAt = updatedAt;
    }

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "exams")
    public Set<ExamAttempts> getExamAttemptses() {
        return this.examAttemptses;
    }

    public void setExamAttemptses(Set<ExamAttempts> examAttemptses) {
        this.examAttemptses = examAttemptses;
    }

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "exams")
    public Set<ExamQuestions> getExamQuestionses() {
        return this.examQuestionses;
    }

    public void setExamQuestionses(Set<ExamQuestions> examQuestionses) {
        this.examQuestionses = examQuestionses;
    }

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "exams")
    public Set<Leaderboard> getLeaderboards() {
        return this.leaderboards;
    }

    public void setLeaderboards(Set<Leaderboard> leaderboards) {
        this.leaderboards = leaderboards;
    }

}
