package com.example.qnuquiz.entity;
// Generated Oct 12, 2025, 7:49:47â€¯PM by Hibernate Tools 7.1.3.Final

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.FetchType;
import jakarta.persistence.Id;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.ManyToOne;
import jakarta.persistence.OneToMany;
import jakarta.persistence.Table;
import jakarta.persistence.Temporal;
import jakarta.persistence.TemporalType;
import java.sql.Timestamp;
import java.util.HashSet;
import java.util.Set;

/**
 * Questions generated by hbm2java
 */
@Entity
@Table(name = "questions", schema = "public", catalog = "defaultdb")
public class Questions implements java.io.Serializable {

    private long id;
    private QuestionCategories questionCategories;
    private Users users;
    private String content;
    private String type;
    private String difficulty;
    private Timestamp createdAt;
    private Timestamp updatedAt;
    private Set<ExamAnswers> examAnswerses = new HashSet<ExamAnswers>(0);
    private Set<QuestionOptions> questionOptionses = new HashSet<QuestionOptions>(0);
    private Set<ExamQuestions> examQuestionses = new HashSet<ExamQuestions>(0);
    private Set<Feedbacks> feedbackses = new HashSet<Feedbacks>(0);

    public Questions() {
    }

    public Questions(long id, String content, String type, String difficulty, Timestamp createdAt,
            Timestamp updatedAt) {
        this.id = id;
        this.content = content;
        this.type = type;
        this.difficulty = difficulty;
        this.createdAt = createdAt;
        this.updatedAt = updatedAt;
    }

    public Questions(long id, QuestionCategories questionCategories, Users users, String content, String type,
            String difficulty, Timestamp createdAt, Timestamp updatedAt, Set<ExamAnswers> examAnswerses,
            Set<QuestionOptions> questionOptionses, Set<ExamQuestions> examQuestionses, Set<Feedbacks> feedbackses) {
        this.id = id;
        this.questionCategories = questionCategories;
        this.users = users;
        this.content = content;
        this.type = type;
        this.difficulty = difficulty;
        this.createdAt = createdAt;
        this.updatedAt = updatedAt;
        this.examAnswerses = examAnswerses;
        this.questionOptionses = questionOptionses;
        this.examQuestionses = examQuestionses;
        this.feedbackses = feedbackses;
    }

    @Id

    @Column(name = "id", unique = true, nullable = false)
    public long getId() {
        return this.id;
    }

    public void setId(long id) {
        this.id = id;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "category_id")
    public QuestionCategories getQuestionCategories() {
        return this.questionCategories;
    }

    public void setQuestionCategories(QuestionCategories questionCategories) {
        this.questionCategories = questionCategories;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "created_by")
    public Users getUsers() {
        return this.users;
    }

    public void setUsers(Users users) {
        this.users = users;
    }

    @Column(name = "content", nullable = false)
    public String getContent() {
        return this.content;
    }

    public void setContent(String content) {
        this.content = content;
    }

    @Column(name = "type", nullable = false)
    public String getType() {
        return this.type;
    }

    public void setType(String type) {
        this.type = type;
    }

    @Column(name = "difficulty", nullable = false)
    public String getDifficulty() {
        return this.difficulty;
    }

    public void setDifficulty(String difficulty) {
        this.difficulty = difficulty;
    }

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name = "created_at", nullable = false, length = 35)
    public Timestamp getCreatedAt() {
        return this.createdAt;
    }

    public void setCreatedAt(Timestamp createdAt) {
        this.createdAt = createdAt;
    }

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name = "updated_at", nullable = false, length = 35)
    public Timestamp getUpdatedAt() {
        return this.updatedAt;
    }

    public void setUpdatedAt(Timestamp updatedAt) {
        this.updatedAt = updatedAt;
    }

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "questions")
    public Set<ExamAnswers> getExamAnswerses() {
        return this.examAnswerses;
    }

    public void setExamAnswerses(Set<ExamAnswers> examAnswerses) {
        this.examAnswerses = examAnswerses;
    }

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "questions")
    public Set<QuestionOptions> getQuestionOptionses() {
        return this.questionOptionses;
    }

    public void setQuestionOptionses(Set<QuestionOptions> questionOptionses) {
        this.questionOptionses = questionOptionses;
    }

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "questions")
    public Set<ExamQuestions> getExamQuestionses() {
        return this.examQuestionses;
    }

    public void setExamQuestionses(Set<ExamQuestions> examQuestionses) {
        this.examQuestionses = examQuestionses;
    }

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "questions")
    public Set<Feedbacks> getFeedbackses() {
        return this.feedbackses;
    }

    public void setFeedbackses(Set<Feedbacks> feedbackses) {
        this.feedbackses = feedbackses;
    }

}
